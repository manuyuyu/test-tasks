-- создаём бд
CREATE DATABASE wib;

-- создаём таблицы
CREATE TABLE "Users" (
  "userId" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
  "age" smallint
);

CREATE TABLE "Items" (
  "itemId" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
  "price" integer
);

CREATE TABLE "Purchases" (
  "purchaseId" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
  "userId" integer, 
  "itemId" integer, 
  "date" date,
  CONSTRAINT fk_purchases_userid
        FOREIGN KEY("userId") 
        REFERENCES "Users"("userId"),
  CONSTRAINT fk_purchases_itemid
        FOREIGN KEY("itemId") 
        REFERENCES "Items"("itemId")
);

-- генерируем тестовые данные

-- пользователи с возрастом от 18 до 99 лет
INSERT INTO "Users" ("age")
SELECT (random() * 71 + 18)::integer
FROM generate_series(1, 1000);

-- товары с ценами от 1 до 300 рублей
INSERT INTO "Items" ("price")
SELECT (random() * 299 + 1)::integer
FROM generate_series(1, 1000);

-- покупки за последние два года
WITH user_items
AS
(
  SELECT u."userId", i."itemId"
  FROM
  (
    SELECT "userId" 
    FROM "Users" 
  ) AS u
  CROSS JOIN
  (
    SELECT "itemId" 
    FROM "Items" 
  ) AS i
  ORDER BY random() 
  LIMIT 500
)
INSERT INTO "Purchases" ("userId", "itemId", "date")
SELECT "userId", "itemId" , CURRENT_DATE - (random() * 365 * 2)::integer AS "date"
FROM user_items;

-- А) какую сумму в среднем в месяц тратит:
-- пользователи в возрастном диапазоне от 18 до 25 лет включительно
-- пользователи в возрастном диапазоне от 26 до 35 лет включительно

WITH df AS
(SELECT DATE_TRUNC('month', p."date")::date AS month,
        CASE
           WHEN "age" BETWEEN 18 AND 25 THEN 'age_18_25' 
           WHEN "age" BETWEEN 26 AND 35 THEN 'age_26_35'
        END AS age_interval,
        p."purchaseId",
        i."price"
FROM "Purchases" AS p
JOIN "Items" AS i ON p."itemId" = i."itemId"
JOIN "Users" AS u ON p."userId" = u."userId")

SELECT age_interval,
       ROUND(AVG(sum_price), 1)
FROM
(SELECT age_interval,
       month,
       SUM("price") AS sum_price
FROM df
WHERE age_interval = 'age_18_25' OR age_interval = 'age_26_35'
GROUP BY age_interval, month
ORDER BY age_interval, month) AS f
GROUP BY age_interval;


-- Б) в каком месяце года выручка от пользователей в возрастном диапазоне 35+ самая большая

SELECT DATE_TRUNC('month', p."date")::date AS month,
       SUM(i."price") AS sum_price
FROM "Purchases" AS p
JOIN "Items" AS i ON p."itemId" = i."itemId"
JOIN "Users" AS u ON p."userId" = u."userId"
WHERE "age" >= 35
GROUP BY month
ORDER BY sum_price DESC
LIMIT 1;


-- В) какой товар обеспечивает наибольший вклад в выручку за последний год


SELECT "itemId",
       "price" / total_amount as item_proportion
       
WITH f AS
(SELECT i."itemId",
        i."price", 
        p."date",
        SUM(i."price") OVER (PARTITION BY CURRENT_DATE - interval '1' year) AS total_amount
FROM "Purchases" AS p
JOIN "Items" AS i ON p."itemId" = i."itemId"
JOIN "Users" AS u ON p."userId" = u."userId"
WHERE p."date" < CURRENT_DATE AND p."date" >= CURRENT_DATE - interval '1' year
GROUP BY p."date", i."itemId")

SELECT "itemId",
       ROUND(100 * "price"::numeric / total_amount, 2) as item_proportion
FROM f
ORDER BY item_proportion DESC
LIMIT 1;


--Г) топ-3 товаров по выручке и их доля в общей выручке за любой год

WITH e AS
(SELECT i."itemId",
        i."price", 
        p."date",
        SUM(i."price") OVER (PARTITION BY EXTRACT(YEAR FROM p."date")) AS total_amount
FROM "Purchases" AS p
JOIN "Items" AS i ON p."itemId" = i."itemId"
JOIN "Users" AS u ON p."userId" = u."userId"
GROUP BY i."itemId", p."date"
ORDER BY EXTRACT(YEAR FROM p."date"), i."itemId"),

f AS
(SELECT "itemId",
       SUM("price") AS sales,
       SUM(ROUND(100 * "price"::numeric / total_amount, 5)) as item_share,
       EXTRACT(YEAR FROM "date") AS year,
       ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM "date") ORDER BY SUM("price") DESC) AS rn
FROM e
GROUP BY year, "itemId")

SELECT *
FROM f
WHERE rn <=3;


